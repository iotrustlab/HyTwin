A → [ (i := *;                                    // Assigns nondeterministic inputs
       (ctrl := {ctrl_orig ∪ stealthy_attack});   // Control can be normal or attacked
       ctrl_dt := ctrl_orig;                      // Digital Twin executes normal control
       {?(ctrl ≠ ctrl_dt); ctrl := safe_ctrl      // If mismatch detected, apply safe control
        ∪ ?¬(ctrl ≠ ctrl_dt)};                   // Otherwise continue with current control
       ctrl;                                      // Execute the selected control
       {plant & Q})*                             // Evolution of physical system
    ] S

Where:

// Initial assumptions (same as before)
A ≡ L1 ≤ x1 ∧ x1 ≤ H1 ∧ L2 ≤ x2 ∧ x2 ≤ H2    
    ∧ V1 = 0 ∧ V2 = 0 ∧ P = 0                  
    ∧ ε ≥ 0 ∧ FL > 0                           
    ∧ LL < L1 ∧ LL < L2                        
    ∧ L1 < H1 ∧ L2 < H2 ∧ H1 < HH ∧ H2 < HH   

// Inputs (same as before)
i ≡ f1 := *; f2 := *                           

// Original control logic implementing safety checks and actuator commands
ctrl_orig ≡ 
    // Tank 1 overflow prevention
    {?(f1 > (HH - x1)/ε); V1 := 0              // Close V1 if potential overflow detected
    ∪ ?¬(f1 > (HH - x1)/ε);                    // If no overflow risk:
       {?(x1 ≤ L1); V1 := 1                     // Open V1 if level too low
        ∪ ?¬(x1 ≤ L1)}};                       // Keep V1 as is if level okay
    
    // Tank 2 level control
    {?(x2 ≤ L2); P := 1; V2 := 1               // Turn on pump and open V2 if level low
     ∪ ?¬(x2 ≤ L2)};                           // Keep settings if level okay
    
    // System-wide safety checks
    {?(V1·f1 - V2·P·f2 < (LL - x1)/ε           // Check for potential underflow in Tank 1
       ∨ f2 ≤ FL                               // Check for insufficient flow rate
       ∨ V2·P·f2 > (HH - x2)/ε);              // Check for potential overflow in Tank 2
     P := 0; V2 := 0                           // If any risk detected, stop pump and close V2
     ∪ ?¬(V1·f1 - V2·P·f2 < (LL - x1)/ε 
          ∨ f2 ≤ FL 
          ∨ V2·P·f2 > (HH - x2)/ε)}           // Keep settings if no risks detected


// Stealthy attack that waits for legitimate conditions
stealthy_attack ≡ {
    ?(x2 ≤ L2 + δ);                            // Wait until near legitimate trigger point
    ?(x1 ≥ H1 - δ);                            // Wait for vulnerable system state
    P := 0                                      // Maliciously turn off pump
}

// Safe control when attack detected
safe_ctrl ≡ P := 0; V1 := 0; V2 := 0           // Safe shutdown

// Plant dynamics (same as before)
plant ≡ x'1 = V1·f1 - V2·P·f2,                
        x'2 = V2·P·f2,                         
        t' = 1                                 

// Evolution domain (same as before)
Q ≡ t ≤ ε ∧ x1 ≥ 0 ∧ x2 ≥ 0 ∧ f1 ≥ 0 ∧ f2 ≥ 0

// Safety conditions (same as before)
S ≡ LL ≤ x1 ∧ x1 ≤ HH ∧ LL ≤ x2 ∧ x2 ≤ HH