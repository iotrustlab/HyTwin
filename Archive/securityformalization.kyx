Definitions
  /* System parameters */
  Real LL;      /* Lower level alarm */
  Real HH;      /* Upper level alarm */
  Real L1, H1;  /* Tank 1 trigger thresholds */
  Real L2, H2;  /* Tank 2 trigger thresholds */
  Real FL;      /* Pump minimum flow rate */
  Real T;       /* Maximum scan-cyle duration */

  /* Example 1 Definitions */

  /* Flow sensing */
  HP sense ::= {
    f1 := *;
    f2 := *;
    /* Flows are non-negative */
    ?(f1 ≥ 0 ∧ f2 ≥ 0);
  };
  
  /* Inflow Logic */
  HP inflow ::= {
    V1 := *;  /* Nondeterministic choice */
    ?(V1 = 0 ∨ V1 = 1);  /* Ensure V1 is binary */
    ?(f1 ≥ 0 ∧ (V1 = 1 → x1 < H1) ∧ (V1 = 0 → x1 ≥ L1));  
  };

  /* Outflow Logic */
  HP outflow ::= {
    P2 := *; V2 := *;
    ?(P2 = 0 ∨ P2 = 1);  /* Ensure P2 is binary */
    ?(V2 = 0 ∨ V2 = 1);  /* Ensure V2 is binary */
    ?(f2 ≥ 0 ∧ (P2 = 1 → x2 > L2) ∧ (P2 = 0 → x2 ≤ L2));
  };

  /* Protection Logic */
  HP protect ::= {
    if (V1*f1 - V2*P2*f2 < (LL - x1) / T ∨ f2 ≤ FL ∨ V2*P2*f2 > (HH - x2) / T) {
      P2 := 0;
      V2 := 0;
    }
  };

  /* Plant Dynamics */
  HP planttank ::= {
    { 
      x1' = V1 * f1 - V2 * P2 * f2, 
      x2' = V2 * P2 * f2,
      t' = 1
      & Qtank(x1,x2,f1,f2) ∧ t ≤ T
    };
  };

  /* Controller Execution */
  HP ctrl ::= {
    inflow;
    outflow;
    protect;
  };

  /* Tank System with Controller and Dynamics */
  HP tank ::= {
    {
      sense;
      ctrl;
      t := 0;
      planttank;
    }*
  };

  /* Example 2: Direct Actuator Attack */

  /* Attacker directly forces valve open and pump on */
  HP directActuatorAttack ::= {
    V1 := 1;  /* Force valve open */
    P2 := 1;   /* Force pump on */
  };

  /* Normal system control */
  HP nominalCtrl ::= {
    V1 := *; 
    P2 := *; 
    ?(V1 = 0 ∨ V1 = 1); 
    ?(P2 = 0 ∨ P2 = 1);
  };

  /* Tank Under Attack Model */
  HP tankattacked ::= {
    {
      sense;

      /* The system can either run normally or be attacked */
      { 
        nominalCtrl;
        ∪
        directActuatorAttack;
      };

      t := 0;  /* Reset clock for scan cycle */

      /* Plant dynamics evolve under attack */
      planttank;
    }*
  };

  /* Example 5: Timed Attack */
  /* TODO: add attack timer */
  HP timedtankattacked ::= {
    {
      sense;

      /* The system can either run normally or be attacked */
      { 
        nominalCtrl;
        ∪
        {V1 := 1; P2 := 1;}  /* Attacker forces valve open and pump on */
      };

      t := 0;  /* Start attack timer */

      /* Plant dynamics evolve under attack */
      planttank;      
    }*
  };

  /* Tank evolution domain (levels and flows are non-negative) */
  Bool Qtank(Real x1, Real x2, Real f1, Real f2) <-> (x1 ≥ 0 ∧ x2 ≥ 0 ∧ f1 ≥ 0 ∧ f2 ≥ 0);

  /* Initial nominal conditions */
  Bool Atank(Real x1, Real x2, Real f1, Real f2, Real t) <-> (
      LL < L1 ∧ L1 ≤ x1 ∧ x1 ≤ H1 ∧ H1 < HH     /* Tank 1 safe level */
    ∧ LL < L2 ∧ L2 ≤ x2 ∧ x2 ≤ H2 ∧ H2 < HH     /* Tank 2 safe level */
    ∧ f1 ≥ 0 ∧ f2 ≥ 0                           /* Valid flow rates */
    ∧ t = 0                                     /* Initial time */
  );

  /* Safety property: Water levels always within bounds */
  Bool Stank(Real x1, Real x2) <-> (
      LL ≤ x1 ∧ x1 ≤ HH 
    ∧ LL ≤ x2 ∧ x2 ≤ HH
  );

End.


/* Safety theorem Example 1 */
Theorem "NFM25/Water level stays within limits"
  ProgramVariables
    Real x1;      /* Water level in Tank 1 */
    Real x2;      /* Water level in Tank 2 */
    Real f1, f2;  /* Flow rates */    
    Real V1;      /* Valve 1 state */
    Real V2;      /* Valve 2 state */
    Real P2;      /* Pump 2 state */
    Real t;       /* Timer */
  End.

  Problem
    /* Show that if Atank holds, then after running the tank program, Stank holds */
    Atank(x1,x2,f1,f2,t) -> [tank;]Stank(x1,x2)
  End.
End.


/* Example 3 */
Theorem "NFM25/Direct actuator attack mitigation is effective"
  Definitions
    /* Attack: Forces valve open and pump on */
    HP directActuatorAttack ::= {
      V1 := 1;  /* Force valve open */
      P2 := 1;  /* Force pump on */
    };

    /* Mitigation: Resets system to safe state */
    HP mitigation ::= {
      V1 := 0;  /* Close valve */
      P2 := 0;  /* Turn off pump */
    };
    
  End.

  ProgramVariables
    Real x1;      /* Water level in Tank 1 */
    Real x2;      /* Water level in Tank 2 */
    Real V1;      /* Valve 1 state */
    Real V2;      /* Valve 2 state */
    Real P2;      /* Pump 2 state */
    Real f1, f2;  /* Flow rates */
    Real t;       /* Timer */
  End.

  Problem
    /* If system starts safe, gets attacked, and mitigation is applied, it remains safe */
    Atank(x1,x2,f1,f2,t) -> [directActuatorAttack; mitigation;]Stank(x1,x2)
  End.
End.


/* Example 4 */
Theorem "NFM25/Direct Actuator Attack Monitor does not miss alarms"
  Definitions
    Real v1post;
    Real ppost;
  End.

  ProgramVariables
    Real v1;
    Real p;
  End.

  Problem
    (v1post = 1 ∧ ppost = 1) 
    -> 
    <v1:=1; p:=1;>(v1post=v1 ∧ ppost = p)
  End.
End.

/* Example 5: Mitigation Horizon */
Theorem "NFM25/Mitigation horizon"
  Definitions
    /* Mitigation must be applied before time T */
    HP mitigation ::= {
      ?(t ≤ T);  /* Ensure mitigation occurs within the horizon */
      V1 := 0;
      P2 := 0;
    };    
  End.

  ProgramVariables
    Real x1;  /* Water level in Tank 1 */
    Real x2;  /* Water level in Tank 2 */
    Real V1;  /* Valve 1 state */
    Real V2;  /* Valve 2 state */
    Real P2;  /* Pump 2 state */
    Real f1, f2;  /* Flow rates */    
    Real t;   /* Attack timer */
  End.

  Problem
    /* Prove that if the attack occurs, mitigation within time T prevents failure */
    Atank(x1,x2,f1,f2,t) -> [{timedtankattacked; mitigation;}*]Stank(x1,x2)
  End.
End.


/* Example 6: Delayed Actuator Attack Mitigation */
Theorem "NFM25/Delayed Actuator Attack Mitigation"
  Definitions
    /* Delayed Mitigation Strategy */
    HP delayedMitigation ::= {
      ?(t ≤ T);  /* Ensure the mitigation horizon has not been exceeded */
      V2 := 1;   /* Open outflow valve */
      P2 := 1;   /* Activate pump to drain excess water */
    };

    /* Attack + Delayed Mitigation */
    HP a ::= {
      c := 0;  /* Reset mitigation clock */
      timedtankattacked;
      ?(c ≤ T);  /* Ensure the mitigation window is still open */
      delayedMitigation;
      tankattacked;
    };
  End.

  ProgramVariables
    Real x1;  /* Water level in Tank 1 */
    Real x2;  /* Water level in Tank 2 */
    Real V1;  /* Valve 1 state */
    Real V2;  /* Valve 2 state */
    Real P2;  /* Pump 2 state */
    Real f1, f2;  /* Flow rates */    
    Real t;   /* Attack timer */    
    Real c;   /* Mitigation delay clock */
  End.

  Problem
    /* Prove that if the attack occurs, mitigation within time T prevents failure */
    Atank(x1,x2,f1,f2,t) -> [a;]Stank(x1,x2)
  End.
End.



/* Case Study: Valve Attack */
Theorem "NFM25/Valve Attack"
  Definitions
    /* Attack: Keeps valve closed even when pump is on */
    HP valveAttack ::= {
      ?(P2 = 1 ∧ x2 < H2);  /* Only occurs if pump is running & water level < max */
      V1 := 0;  /* Force valve to remain closed */
    };

    /* Mitigation: Open valve if pump is running */
    HP valveMitigation ::= {
      ?(P2 = 1);  /* Check if pump is on */
      V1 := 1;  /* Open valve to prevent pressure buildup */
    };
    
  End.

  ProgramVariables
    Real x1;  /* Water level in Tank 1 */
    Real x2;  /* Water level in Tank 2 */
    Real V1;  /* Valve 1 state */
    Real V2;  /* Valve 2 state */
    Real P2;  /* Pump 2 state */
    Real f1, f2;  /* Flow rates */
    Real t;  /* Timer */
  End.

  Problem
    /* Prove that if the valve attack occurs, mitigation ensures system safety */
    Atank(x1,x2,f1,f2,t) -> [valveAttack; valveMitigation;] Stank(x1,x2)
  End.
End.


/* Case Study: Stealthy Sensor Attack */
Theorem "NFM25/Stealthy Sensor Attack"
  Definitions
    import kyx.math.abs;

    /* Attack: Manipulates sensor readings */
    HP stealthySensorAttack ::= {
      x2actual := x2;  /* Store actual water level */
      x2 := *;  /* Attacker injects falsified sensor readings */
      ?(abs(x2 - x2actual) ≤ D);  /* Ensure attack remains undetectable */
    };

    /* Attack Monitor: Detects deviations between actual and reported values */
    Bool attackMonitor(Real x2, Real x2actual) <-> (abs(x2 - x2actual) > D);

    /* Mitigation: Reset falsified sensor values */
    HP sensorMitigation ::= {
      if (attackMonitor(x2, x2actual)) {  /* Detect attack */
        x2 := x2actual;                   /* Restore correct sensor reading */
      }
    };

  End.

  ProgramVariables
    Real x1;  /* Water level in Tank 1 */
    Real x2;  /* Water level in Tank 2 (reported) */
    Real x2actual;  /* True water level in Tank 2 */
    Real V1;  /* Valve 1 state */
    Real V2;  /* Valve 2 state */
    Real P2;  /* Pump 2 state */
    Real f1, f2;  /* Flow rates */
    Real t;  /* Timer */
    Real D;  /* Maximum allowable sensor deviation */
  End.

  Problem
    /* Prove that if a stealthy sensor attack occurs, mitigation restores system safety */
    Atank(x1,x2,f1,f2,t) -> [stealthySensorAttack; sensorMitigation;]Stank(x1,x2)
  End.
End.


/* Case Study: Sensor Spike Attack */
Theorem "NFM25/Sensor Spike Attack"
  Definitions
    import kyx.math.abs;
    
    /* Attack: Injects a sudden false spike in sensor readings */
    HP sensorSpikeAttack ::= {
      x2actual := x2;  /* Store actual water level */
      x2 := *;  /* Attacker injects a false reading */
      ?(x2 > HH);  /* Ensure the attack causes emergency draining */
      ?(abs(x2 - x2actual) ≤ E);  /* Ensure the attack remains within sensor error range */
    };

    /* Attack Monitor: Detects rapid spikes in sensor data */
    Bool attackMonitor(Real x2, Real x2actual) <-> (abs(x2 - x2actual) > E);

    /* Mitigation: Prevent false emergency draining */
    HP sensorSpikeMitigation ::= {
      ?attackMonitor(x2, x2actual);  /* Detect attack */
      x2 := x2actual;  /* Restore correct sensor reading */
      ?(t ≤ Tunderflow);  /* Ensure mitigation occurs before underflow */
    };
  End.

  ProgramVariables
    Real x1;  /* Water level in Tank 1 */
    Real x2;  /* Water level in Tank 2 (reported) */
    Real x2actual;  /* True water level in Tank 2 */
    Real V1;  /* Valve 1 state */
    Real V2;  /* Valve 2 state */
    Real P2;  /* Pump 2 state */
    Real f1, f2;  /* Flow rates */
    Real t;  /* Timer */
    Real E;  /* Maximum sensor fluctuation before detection */
    Real Tunderflow;  /* Time before emergency draining must stop */
  End.

  Problem
    /* Prove that if a sensor spike attack occurs, mitigation ensures system safety */
    Atank(x1,x2,f1,f2,t) -> [sensorSpikeAttack; sensorSpikeMitigation;]Stank(x1,x2)
  End.
End.

